use crate::security_descriptor::ControlFlags;
use crate::security_descriptor::{parse_acl, ACL};
use crate::sid::SID;
use serde::Serialize;

use nom::{
    number::complete::{le_u16, le_u32, le_u8},
    sequence::tuple,
    IResult,
};

#[derive(Debug, PartialEq, Eq, Serialize, Clone)]
pub struct SDDL {
    revision: u8,
    sbz1: u8,
    pub control_flags: ControlFlags,
    offset_owner: u32,
    offset_group: u32,
    offset_sacl: u32,
    offset_dacl: u32,
    pub owner_sid: Option<SID>,
    pub group_sid: Option<SID>,
    pub dacl: Option<ACL>,
}

impl SDDL {
    pub fn from_bytes(input: &[u8]) -> Result<Self, nom::Err<nom::error::Error<&[u8]>>> {
        let (_, sddl) = parse_sddl(input)?;
        Ok(sddl)
    }
}

fn parse_sddl(input: &[u8]) -> IResult<&[u8], SDDL> {
    let (_, (revision, sbz1, control, offset_owner, offset_group, offset_sacl, offset_dacl)) =
        tuple((le_u8, le_u8, le_u16, le_u32, le_u32, le_u32, le_u32))(input)?;

    let control_flags = ControlFlags::new(control);

    let owner_sid = if offset_owner != 0 {
        Some(
            SID::from_bytes(&input[offset_owner as usize..]).map_err(|_| {
                nom::Err::Error(nom::error::Error::new(input, nom::error::ErrorKind::Fail))
            })?,
        )
    } else {
        None
    };

    let group_sid = if offset_group != 0 {
        Some(
            SID::from_bytes(&input[offset_group as usize..]).map_err(|_| {
                nom::Err::Error(nom::error::Error::new(input, nom::error::ErrorKind::Fail))
            })?,
        )
    } else {
        None
    };

    let dacl = if offset_dacl != 0 {
        Some(parse_acl(&input[offset_dacl as usize..])?.1)
    } else {
        None
    };

    Ok((
        input,
        SDDL {
            revision,
            sbz1,
            control_flags,
            offset_owner,
            offset_group,
            offset_sacl,
            offset_dacl,
            owner_sid,
            group_sid,
            dacl,
        },
    ))
}

#[cfg(test)]
mod tests {
    use crate::security_descriptor::{ACEType, ACE};

    use super::*;

    #[test]
    fn test_sddl_parsing() {
        // O:S-1-5-21-3890413604-3811681533-153378300-1005G:S-1-5-21-3890413604-3811681533-153378300-513D:(A;ID;FA;;;SY)(A;ID;FA;;;BA)(A;ID;FA;;;S-1-5-21-3890413604-3811681533-153378300-1005)
        let sddl_bytes = vec![
            1, 0, 4, 128, 20, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 1, 5, 0, 0, 0, 0, 0,
            5, 21, 0, 0, 0, 36, 0, 227, 231, 253, 164, 49, 227, 252, 93, 36, 9, 237, 3, 0, 0, 1, 5,
            0, 0, 0, 0, 0, 5, 21, 0, 0, 0, 36, 0, 227, 231, 253, 164, 49, 227, 252, 93, 36, 9, 1,
            2, 0, 0, 2, 0, 88, 0, 3, 0, 0, 0, 0, 16, 20, 0, 255, 1, 31, 0, 1, 1, 0, 0, 0, 0, 0, 5,
            18, 0, 0, 0, 0, 16, 24, 0, 255, 1, 31, 0, 1, 2, 0, 0, 0, 0, 0, 5, 32, 0, 0, 0, 32, 2,
            0, 0, 0, 16, 36, 0, 255, 1, 31, 0, 1, 5, 0, 0, 0, 0, 0, 5, 21, 0, 0, 0, 36, 0, 227,
            231, 253, 164, 49, 227, 252, 93, 36, 9, 237, 3, 0, 0,
        ];
        let sddl = SDDL::from_bytes(&sddl_bytes).unwrap();

        // We'll add assertions here to check the parsed values
        assert_eq!(sddl.revision, 1);
        assert_eq!(sddl.sbz1, 0);
        assert_eq!(sddl.control_flags, ControlFlags(32772));
        assert_eq!(sddl.offset_owner, 20);
        assert_eq!(sddl.offset_group, 48);
        assert_eq!(sddl.offset_sacl, 0);
        assert_eq!(sddl.offset_dacl, 76);

        if let Some(owner_sid) = &sddl.owner_sid {
            assert_eq!(
                owner_sid.to_string(),
                "S-1-5-21-3890413604-3811681533-153378300-1005"
            );
        } else {
            assert!(false, "Owner SID should be present");
        }

        if let Some(group_sid) = &sddl.group_sid {
            assert_eq!(
                group_sid.to_string(),
                "S-1-5-21-3890413604-3811681533-153378300-513"
            );
        } else {
            assert!(false, "Group SID should be present");
        }

        if let Some(dacl) = &sddl.dacl {
            assert_eq!(dacl.acl_revision, 2, "ACL revision should be 4");
            assert_eq!(dacl.sbz1, 0, "sbz1 should be 0");
            assert_eq!(dacl.acl_size, 88, "ACL size should be 2416");
            assert_eq!(dacl.ace_count, 3, "ACE count should be 53");
            assert_eq!(dacl.sbz2, 0, "sbz2 should be 0");

            if let Some(ACE::AccessAllowed(first_ace)) = dacl.aces.get(0) {
                assert_eq!(
                    first_ace.header.ace_type,
                    ACEType::AccessAllowed,
                    "First ACE should be ACCESS_ALLOWED_OBJECT_ACE_TYPE"
                );
                assert_eq!(first_ace.header.ace_size, 20, "First ACE size should be 60");
            } else {
                assert!(false, "First ACE should be AccessAllowed");
            }
        } else {
            assert!(false, "DACL should be present");
        }
    }

    #[test]
    fn test_sddl_testing() {
        /*
        Used for testing SDDLs to see if they parse or not. Returns debug output.
        Get ACL:
        ```
        $file = ".\file.bin"
        $acl = Get-Acl $file
        (Get-ACL $file).sddl
        (Get-ACL $file).GetSecurityDescriptorBinaryForm() -join ", "
        ```
        */

        /*
        O:BAG:BAD:AI(A;;RP;;;WD)(A;;LCRPLORC;;;ED)(A;;LCRPLORC;;;AU)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;SY)(A;CI;CCLCSWRPWPLOCRSDRCWDWO;;;BA)(A;;RPRC;;;RU)(A;CI;LC;;;RU)(A;;CCLCSWRPWPLOCRRCWDWO;;;DA)(A;CI;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;S-1-5-21-1935163693-1572912069-975596842-519)(OA;CIIO;SW;9b026da6-0d3c-465c-8bee-5199d7165cba;bf967a86-0de6-11d0-a285-00aa003049e2;CO)(OA;;CR;1131f6ac-9c07-11d1-f79f-00c04fc2dcd2;;ED)(OA;;CR;1131f6ab-9c07-11d1-f79f-00c04fc2dcd2;;ED)(OA;;CR;1131f6aa-9c07-11d1-f79f-00c04fc2dcd2;;ED)(OA;;CR;89e95b76-444d-4c62-991a-0facbeda640c;;ED)(OA;CIIO;RP;b7c69e6d-2cc7-11d2-854e-00a0c983f608;bf967aba-0de6-11d0-a285-00aa003049e2;ED)(OA;;CR;1131f6ae-9c07-11d1-f79f-00c04fc2dcd2;;ED)(OA;CIIO;RP;b7c69e6d-2cc7-11d2-854e-00a0c983f608;bf967a9c-0de6-11d0-a285-00aa003049e2;ED)(OA;CIIO;RP;b7c69e6d-2cc7-11d2-854e-00a0c983f608;bf967a86-0de6-11d0-a285-00aa003049e2;ED)(OA;CIIO;SW;9b026da6-0d3c-465c-8bee-5199d7165cba;bf967a86-0de6-11d0-a285-00aa003049e2;PS)(OA;CIIO;RPWPCR;91e647de-d96f-4b70-9557-d63ff4f3ccd8;;PS)(OA;CIIO;WP;ea1b7b93-5e48-46d5-bc6c-4df4fda78a35;bf967a86-0de6-11d0-a285-00aa003049e2;PS)(OA;OICI;RPWP;3f78c3e5-f79a-46bd-a0b8-9d18116ddc79;;PS)(OA;;CR;05c74c5e-4deb-43b4-bd9f-86664c2a7fd5;;AU)(OA;;CR;ccc2dc7d-a6ad-4a7a-8846-c04e3cc53501;;AU)(OA;;CR;280f369c-67c7-438e-ae98-1d46f3c6f541;;AU)(OA;;RP;b8119fd0-04f6-4762-ab7a-4986c76b3f9a;;AU)(OA;;CR;1131f6ae-9c07-11d1-f79f-00c04fc2dcd2;;BA)(OA;;CR;1131f6ad-9c07-11d1-f79f-00c04fc2dcd2;;BA)(OA;;CR;1131f6ac-9c07-11d1-f79f-00c04fc2dcd2;;BA)(OA;;CR;1131f6ab-9c07-11d1-f79f-00c04fc2dcd2;;BA)(OA;;CR;1131f6aa-9c07-11d1-f79f-00c04fc2dcd2;;BA)(OA;;CR;89e95b76-444d-4c62-991a-0facbeda640c;;BA)(OA;CIIO;LCRPLORC;;bf967aba-0de6-11d0-a285-00aa003049e2;RU)(OA;CIIO;LCRPLORC;;bf967a9c-0de6-11d0-a285-00aa003049e2;RU)(OA;CIIO;RP;59ba2f42-79a2-11d0-9020-00c04fc2d3cf;bf967aba-0de6-11d0-a285-00aa003049e2;RU)(OA;CIIO;LCRPLORC;;4828cc14-1437-45bc-9b07-ad6f015e5f28;RU)(OA;;RP;b8119fd0-04f6-4762-ab7a-4986c76b3f9a;;RU)(OA;CIIO;RP;037088f8-0ae1-11d2-b422-00a0c968f939;4828cc14-1437-45bc-9b07-ad6f015e5f28;RU)(OA;CIIO;RP;4c164200-20c0-11d0-a768-00aa006e0529;bf967aba-0de6-11d0-a285-00aa003049e2;RU)(OA;CIIO;RP;5f202010-79a5-11d0-9020-00c04fc2d4cf;4828cc14-1437-45bc-9b07-ad6f015e5f28;RU)(OA;CIIO;RP;5f202010-79a5-11d0-9020-00c04fc2d4cf;bf967aba-0de6-11d0-a285-00aa003049e2;RU)(OA;;RP;c7407360-20bf-11d0-a768-00aa006e0529;;RU)(OA;CIIO;RP;59ba2f42-79a2-11d0-9020-00c04fc2d3cf;4828cc14-1437-45bc-9b07-ad6f015e5f28;RU)(OA;CIIO;RP;037088f8-0ae1-11d2-b422-00a0c968f939;bf967aba-0de6-11d0-a285-00aa003049e2;RU)(OA;CIIO;RP;bc0ac240-79a9-11d0-9020-00c04fc2d4cf;bf967aba-0de6-11d0-a285-00aa003049e2;RU)(OA;CIIO;RP;bc0ac240-79a9-11d0-9020-00c04fc2d4cf;4828cc14-1437-45bc-9b07-ad6f015e5f28;RU)(OA;CIIO;RP;4c164200-20c0-11d0-a768-00aa006e0529;4828cc14-1437-45bc-9b07-ad6f015e5f28;RU)(OA;;CR;e2a36dc9-ae17-47c3-b58b-be34c55ba633;;S-1-5-32-557)(OA;;CR;1131f6aa-9c07-11d1-f79f-00c04fc2dcd2;;S-1-5-21-1935163693-1572912069-975596842-498)(OA;;CR;1131f6ad-9c07-11d1-f79f-00c04fc2dcd2;;DD)(OA;;CR;3e0f7e18-2c7a-4c10-ba82-4d926db99a3e;;S-1-5-21-1935163693-1572912069-975596842-522)(OA;CI;RPWP;5b47d60f-6090-40b2-9f37-2a4de88f3063;;S-1-5-21-1935163693-1572912069-975596842-526)(OA;CI;RPWP;5b47d60f-6090-40b2-9f37-2a4de88f3063;;S-1-5-21-1935163693-1572912069-975596842-527)
        */
        let sddl_bytes = vec![
            1, 0, 4, 132, 20, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0,
            5, 32, 0, 0, 0, 32, 2, 0, 0, 1, 2, 0, 0, 0, 0, 0, 5, 32, 0, 0, 0, 32, 2, 0, 0, 4, 0,
            112, 9, 53, 0, 0, 0, 0, 0, 20, 0, 16, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
            0, 20, 0, 148, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 5, 9, 0, 0, 0, 0, 0, 20, 0, 148, 0, 2, 0,
            1, 1, 0, 0, 0, 0, 0, 5, 11, 0, 0, 0, 0, 0, 20, 0, 255, 1, 15, 0, 1, 1, 0, 0, 0, 0, 0,
            5, 18, 0, 0, 0, 0, 2, 24, 0, 189, 1, 15, 0, 1, 2, 0, 0, 0, 0, 0, 5, 32, 0, 0, 0, 32, 2,
            0, 0, 0, 0, 24, 0, 16, 0, 2, 0, 1, 2, 0, 0, 0, 0, 0, 5, 32, 0, 0, 0, 42, 2, 0, 0, 0, 2,
            24, 0, 4, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 5, 32, 0, 0, 0, 42, 2, 0, 0, 0, 0, 36, 0, 189,
            1, 14, 0, 1, 5, 0, 0, 0, 0, 0, 5, 21, 0, 0, 0, 45, 65, 88, 115, 197, 187, 192, 93, 42,
            109, 38, 58, 0, 2, 0, 0, 0, 2, 36, 0, 255, 1, 15, 0, 1, 5, 0, 0, 0, 0, 0, 5, 21, 0, 0,
            0, 45, 65, 88, 115, 197, 187, 192, 93, 42, 109, 38, 58, 7, 2, 0, 0, 5, 10, 56, 0, 8, 0,
            0, 0, 3, 0, 0, 0, 166, 109, 2, 155, 60, 13, 92, 70, 139, 238, 81, 153, 215, 22, 92,
            186, 134, 122, 150, 191, 230, 13, 208, 17, 162, 133, 0, 170, 0, 48, 73, 226, 1, 1, 0,
            0, 0, 0, 0, 3, 0, 0, 0, 0, 5, 0, 40, 0, 0, 1, 0, 0, 1, 0, 0, 0, 172, 246, 49, 17, 7,
            156, 209, 17, 247, 159, 0, 192, 79, 194, 220, 210, 1, 1, 0, 0, 0, 0, 0, 5, 9, 0, 0, 0,
            5, 0, 40, 0, 0, 1, 0, 0, 1, 0, 0, 0, 171, 246, 49, 17, 7, 156, 209, 17, 247, 159, 0,
            192, 79, 194, 220, 210, 1, 1, 0, 0, 0, 0, 0, 5, 9, 0, 0, 0, 5, 0, 40, 0, 0, 1, 0, 0, 1,
            0, 0, 0, 170, 246, 49, 17, 7, 156, 209, 17, 247, 159, 0, 192, 79, 194, 220, 210, 1, 1,
            0, 0, 0, 0, 0, 5, 9, 0, 0, 0, 5, 0, 40, 0, 0, 1, 0, 0, 1, 0, 0, 0, 118, 91, 233, 137,
            77, 68, 98, 76, 153, 26, 15, 172, 190, 218, 100, 12, 1, 1, 0, 0, 0, 0, 0, 5, 9, 0, 0,
            0, 5, 10, 56, 0, 16, 0, 0, 0, 3, 0, 0, 0, 109, 158, 198, 183, 199, 44, 210, 17, 133,
            78, 0, 160, 201, 131, 246, 8, 186, 122, 150, 191, 230, 13, 208, 17, 162, 133, 0, 170,
            0, 48, 73, 226, 1, 1, 0, 0, 0, 0, 0, 5, 9, 0, 0, 0, 5, 0, 40, 0, 0, 1, 0, 0, 1, 0, 0,
            0, 174, 246, 49, 17, 7, 156, 209, 17, 247, 159, 0, 192, 79, 194, 220, 210, 1, 1, 0, 0,
            0, 0, 0, 5, 9, 0, 0, 0, 5, 10, 56, 0, 16, 0, 0, 0, 3, 0, 0, 0, 109, 158, 198, 183, 199,
            44, 210, 17, 133, 78, 0, 160, 201, 131, 246, 8, 156, 122, 150, 191, 230, 13, 208, 17,
            162, 133, 0, 170, 0, 48, 73, 226, 1, 1, 0, 0, 0, 0, 0, 5, 9, 0, 0, 0, 5, 10, 56, 0, 16,
            0, 0, 0, 3, 0, 0, 0, 109, 158, 198, 183, 199, 44, 210, 17, 133, 78, 0, 160, 201, 131,
            246, 8, 134, 122, 150, 191, 230, 13, 208, 17, 162, 133, 0, 170, 0, 48, 73, 226, 1, 1,
            0, 0, 0, 0, 0, 5, 9, 0, 0, 0, 5, 10, 56, 0, 8, 0, 0, 0, 3, 0, 0, 0, 166, 109, 2, 155,
            60, 13, 92, 70, 139, 238, 81, 153, 215, 22, 92, 186, 134, 122, 150, 191, 230, 13, 208,
            17, 162, 133, 0, 170, 0, 48, 73, 226, 1, 1, 0, 0, 0, 0, 0, 5, 10, 0, 0, 0, 5, 10, 40,
            0, 48, 1, 0, 0, 1, 0, 0, 0, 222, 71, 230, 145, 111, 217, 112, 75, 149, 87, 214, 63,
            244, 243, 204, 216, 1, 1, 0, 0, 0, 0, 0, 5, 10, 0, 0, 0, 5, 10, 56, 0, 32, 0, 0, 0, 3,
            0, 0, 0, 147, 123, 27, 234, 72, 94, 213, 70, 188, 108, 77, 244, 253, 167, 138, 53, 134,
            122, 150, 191, 230, 13, 208, 17, 162, 133, 0, 170, 0, 48, 73, 226, 1, 1, 0, 0, 0, 0, 0,
            5, 10, 0, 0, 0, 5, 3, 40, 0, 48, 0, 0, 0, 1, 0, 0, 0, 229, 195, 120, 63, 154, 247, 189,
            70, 160, 184, 157, 24, 17, 109, 220, 121, 1, 1, 0, 0, 0, 0, 0, 5, 10, 0, 0, 0, 5, 0,
            40, 0, 0, 1, 0, 0, 1, 0, 0, 0, 94, 76, 199, 5, 235, 77, 180, 67, 189, 159, 134, 102,
            76, 42, 127, 213, 1, 1, 0, 0, 0, 0, 0, 5, 11, 0, 0, 0, 5, 0, 40, 0, 0, 1, 0, 0, 1, 0,
            0, 0, 125, 220, 194, 204, 173, 166, 122, 74, 136, 70, 192, 78, 60, 197, 53, 1, 1, 1, 0,
            0, 0, 0, 0, 5, 11, 0, 0, 0, 5, 0, 40, 0, 0, 1, 0, 0, 1, 0, 0, 0, 156, 54, 15, 40, 199,
            103, 142, 67, 174, 152, 29, 70, 243, 198, 245, 65, 1, 1, 0, 0, 0, 0, 0, 5, 11, 0, 0, 0,
            5, 0, 40, 0, 16, 0, 0, 0, 1, 0, 0, 0, 208, 159, 17, 184, 246, 4, 98, 71, 171, 122, 73,
            134, 199, 107, 63, 154, 1, 1, 0, 0, 0, 0, 0, 5, 11, 0, 0, 0, 5, 0, 44, 0, 0, 1, 0, 0,
            1, 0, 0, 0, 174, 246, 49, 17, 7, 156, 209, 17, 247, 159, 0, 192, 79, 194, 220, 210, 1,
            2, 0, 0, 0, 0, 0, 5, 32, 0, 0, 0, 32, 2, 0, 0, 5, 0, 44, 0, 0, 1, 0, 0, 1, 0, 0, 0,
            173, 246, 49, 17, 7, 156, 209, 17, 247, 159, 0, 192, 79, 194, 220, 210, 1, 2, 0, 0, 0,
            0, 0, 5, 32, 0, 0, 0, 32, 2, 0, 0, 5, 0, 44, 0, 0, 1, 0, 0, 1, 0, 0, 0, 172, 246, 49,
            17, 7, 156, 209, 17, 247, 159, 0, 192, 79, 194, 220, 210, 1, 2, 0, 0, 0, 0, 0, 5, 32,
            0, 0, 0, 32, 2, 0, 0, 5, 0, 44, 0, 0, 1, 0, 0, 1, 0, 0, 0, 171, 246, 49, 17, 7, 156,
            209, 17, 247, 159, 0, 192, 79, 194, 220, 210, 1, 2, 0, 0, 0, 0, 0, 5, 32, 0, 0, 0, 32,
            2, 0, 0, 5, 0, 44, 0, 0, 1, 0, 0, 1, 0, 0, 0, 170, 246, 49, 17, 7, 156, 209, 17, 247,
            159, 0, 192, 79, 194, 220, 210, 1, 2, 0, 0, 0, 0, 0, 5, 32, 0, 0, 0, 32, 2, 0, 0, 5, 0,
            44, 0, 0, 1, 0, 0, 1, 0, 0, 0, 118, 91, 233, 137, 77, 68, 98, 76, 153, 26, 15, 172,
            190, 218, 100, 12, 1, 2, 0, 0, 0, 0, 0, 5, 32, 0, 0, 0, 32, 2, 0, 0, 5, 10, 44, 0, 148,
            0, 2, 0, 2, 0, 0, 0, 186, 122, 150, 191, 230, 13, 208, 17, 162, 133, 0, 170, 0, 48, 73,
            226, 1, 2, 0, 0, 0, 0, 0, 5, 32, 0, 0, 0, 42, 2, 0, 0, 5, 10, 44, 0, 148, 0, 2, 0, 2,
            0, 0, 0, 156, 122, 150, 191, 230, 13, 208, 17, 162, 133, 0, 170, 0, 48, 73, 226, 1, 2,
            0, 0, 0, 0, 0, 5, 32, 0, 0, 0, 42, 2, 0, 0, 5, 10, 60, 0, 16, 0, 0, 0, 3, 0, 0, 0, 66,
            47, 186, 89, 162, 121, 208, 17, 144, 32, 0, 192, 79, 194, 211, 207, 186, 122, 150, 191,
            230, 13, 208, 17, 162, 133, 0, 170, 0, 48, 73, 226, 1, 2, 0, 0, 0, 0, 0, 5, 32, 0, 0,
            0, 42, 2, 0, 0, 5, 10, 44, 0, 148, 0, 2, 0, 2, 0, 0, 0, 20, 204, 40, 72, 55, 20, 188,
            69, 155, 7, 173, 111, 1, 94, 95, 40, 1, 2, 0, 0, 0, 0, 0, 5, 32, 0, 0, 0, 42, 2, 0, 0,
            5, 0, 44, 0, 16, 0, 0, 0, 1, 0, 0, 0, 208, 159, 17, 184, 246, 4, 98, 71, 171, 122, 73,
            134, 199, 107, 63, 154, 1, 2, 0, 0, 0, 0, 0, 5, 32, 0, 0, 0, 42, 2, 0, 0, 5, 10, 60, 0,
            16, 0, 0, 0, 3, 0, 0, 0, 248, 136, 112, 3, 225, 10, 210, 17, 180, 34, 0, 160, 201, 104,
            249, 57, 20, 204, 40, 72, 55, 20, 188, 69, 155, 7, 173, 111, 1, 94, 95, 40, 1, 2, 0, 0,
            0, 0, 0, 5, 32, 0, 0, 0, 42, 2, 0, 0, 5, 10, 60, 0, 16, 0, 0, 0, 3, 0, 0, 0, 0, 66, 22,
            76, 192, 32, 208, 17, 167, 104, 0, 170, 0, 110, 5, 41, 186, 122, 150, 191, 230, 13,
            208, 17, 162, 133, 0, 170, 0, 48, 73, 226, 1, 2, 0, 0, 0, 0, 0, 5, 32, 0, 0, 0, 42, 2,
            0, 0, 5, 10, 60, 0, 16, 0, 0, 0, 3, 0, 0, 0, 16, 32, 32, 95, 165, 121, 208, 17, 144,
            32, 0, 192, 79, 194, 212, 207, 20, 204, 40, 72, 55, 20, 188, 69, 155, 7, 173, 111, 1,
            94, 95, 40, 1, 2, 0, 0, 0, 0, 0, 5, 32, 0, 0, 0, 42, 2, 0, 0, 5, 10, 60, 0, 16, 0, 0,
            0, 3, 0, 0, 0, 16, 32, 32, 95, 165, 121, 208, 17, 144, 32, 0, 192, 79, 194, 212, 207,
            186, 122, 150, 191, 230, 13, 208, 17, 162, 133, 0, 170, 0, 48, 73, 226, 1, 2, 0, 0, 0,
            0, 0, 5, 32, 0, 0, 0, 42, 2, 0, 0, 5, 0, 44, 0, 16, 0, 0, 0, 1, 0, 0, 0, 96, 115, 64,
            199, 191, 32, 208, 17, 167, 104, 0, 170, 0, 110, 5, 41, 1, 2, 0, 0, 0, 0, 0, 5, 32, 0,
            0, 0, 42, 2, 0, 0, 5, 10, 60, 0, 16, 0, 0, 0, 3, 0, 0, 0, 66, 47, 186, 89, 162, 121,
            208, 17, 144, 32, 0, 192, 79, 194, 211, 207, 20, 204, 40, 72, 55, 20, 188, 69, 155, 7,
            173, 111, 1, 94, 95, 40, 1, 2, 0, 0, 0, 0, 0, 5, 32, 0, 0, 0, 42, 2, 0, 0, 5, 10, 60,
            0, 16, 0, 0, 0, 3, 0, 0, 0, 248, 136, 112, 3, 225, 10, 210, 17, 180, 34, 0, 160, 201,
            104, 249, 57, 186, 122, 150, 191, 230, 13, 208, 17, 162, 133, 0, 170, 0, 48, 73, 226,
            1, 2, 0, 0, 0, 0, 0, 5, 32, 0, 0, 0, 42, 2, 0, 0, 5, 10, 60, 0, 16, 0, 0, 0, 3, 0, 0,
            0, 64, 194, 10, 188, 169, 121, 208, 17, 144, 32, 0, 192, 79, 194, 212, 207, 186, 122,
            150, 191, 230, 13, 208, 17, 162, 133, 0, 170, 0, 48, 73, 226, 1, 2, 0, 0, 0, 0, 0, 5,
            32, 0, 0, 0, 42, 2, 0, 0, 5, 10, 60, 0, 16, 0, 0, 0, 3, 0, 0, 0, 64, 194, 10, 188, 169,
            121, 208, 17, 144, 32, 0, 192, 79, 194, 212, 207, 20, 204, 40, 72, 55, 20, 188, 69,
            155, 7, 173, 111, 1, 94, 95, 40, 1, 2, 0, 0, 0, 0, 0, 5, 32, 0, 0, 0, 42, 2, 0, 0, 5,
            10, 60, 0, 16, 0, 0, 0, 3, 0, 0, 0, 0, 66, 22, 76, 192, 32, 208, 17, 167, 104, 0, 170,
            0, 110, 5, 41, 20, 204, 40, 72, 55, 20, 188, 69, 155, 7, 173, 111, 1, 94, 95, 40, 1, 2,
            0, 0, 0, 0, 0, 5, 32, 0, 0, 0, 42, 2, 0, 0, 5, 0, 44, 0, 0, 1, 0, 0, 1, 0, 0, 0, 201,
            109, 163, 226, 23, 174, 195, 71, 181, 139, 190, 52, 197, 91, 166, 51, 1, 2, 0, 0, 0, 0,
            0, 5, 32, 0, 0, 0, 45, 2, 0, 0, 5, 0, 56, 0, 0, 1, 0, 0, 1, 0, 0, 0, 170, 246, 49, 17,
            7, 156, 209, 17, 247, 159, 0, 192, 79, 194, 220, 210, 1, 5, 0, 0, 0, 0, 0, 5, 21, 0, 0,
            0, 45, 65, 88, 115, 197, 187, 192, 93, 42, 109, 38, 58, 242, 1, 0, 0, 5, 0, 56, 0, 0,
            1, 0, 0, 1, 0, 0, 0, 173, 246, 49, 17, 7, 156, 209, 17, 247, 159, 0, 192, 79, 194, 220,
            210, 1, 5, 0, 0, 0, 0, 0, 5, 21, 0, 0, 0, 45, 65, 88, 115, 197, 187, 192, 93, 42, 109,
            38, 58, 4, 2, 0, 0, 5, 0, 56, 0, 0, 1, 0, 0, 1, 0, 0, 0, 24, 126, 15, 62, 122, 44, 16,
            76, 186, 130, 77, 146, 109, 185, 154, 62, 1, 5, 0, 0, 0, 0, 0, 5, 21, 0, 0, 0, 45, 65,
            88, 115, 197, 187, 192, 93, 42, 109, 38, 58, 10, 2, 0, 0, 5, 2, 56, 0, 48, 0, 0, 0, 1,
            0, 0, 0, 15, 214, 71, 91, 144, 96, 178, 64, 159, 55, 42, 77, 232, 143, 48, 99, 1, 5, 0,
            0, 0, 0, 0, 5, 21, 0, 0, 0, 45, 65, 88, 115, 197, 187, 192, 93, 42, 109, 38, 58, 14, 2,
            0, 0, 5, 2, 56, 0, 48, 0, 0, 0, 1, 0, 0, 0, 15, 214, 71, 91, 144, 96, 178, 64, 159, 55,
            42, 77, 232, 143, 48, 99, 1, 5, 0, 0, 0, 0, 0, 5, 21, 0, 0, 0, 45, 65, 88, 115, 197,
            187, 192, 93, 42, 109, 38, 58, 15, 2, 0, 0,
        ];
        let sddl = SDDL::from_bytes(&sddl_bytes).unwrap();
        assert_eq!(sddl.owner_sid.unwrap().to_string(), "S-1-5-32-544");
        assert_eq!(sddl.group_sid.unwrap().to_string(), "S-1-5-32-544");
    }
}
